// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/bot/contracts.go

// Package bot is a generated GoMock package.
package bot

import (
	context "context"
	io "io"
	reflect "reflect"

	telegram_bot_api "github.com/go-telegram-bot-api/telegram-bot-api"
	gomock "github.com/golang/mock/gomock"
	v2 "github.com/kkdai/youtube/v2"
	db "github.com/robotomize/cribe/internal/db"
	amqp "github.com/streadway/amqp"
)

// MockYotuber is a mock of Yotuber interface.
type MockYotuber struct {
	ctrl     *gomock.Controller
	recorder *MockYotuberMockRecorder
}

// MockYotuberMockRecorder is the mock recorder for MockYotuber.
type MockYotuberMockRecorder struct {
	mock *MockYotuber
}

// NewMockYotuber creates a new mock instance.
func NewMockYotuber(ctrl *gomock.Controller) *MockYotuber {
	mock := &MockYotuber{ctrl: ctrl}
	mock.recorder = &MockYotuberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYotuber) EXPECT() *MockYotuberMockRecorder {
	return m.recorder
}

// GetStream mocks base method.
func (m *MockYotuber) GetStream(video *v2.Video, format *v2.Format) (io.ReadCloser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStream", video, format)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStream indicates an expected call of GetStream.
func (mr *MockYotuberMockRecorder) GetStream(video, format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStream", reflect.TypeOf((*MockYotuber)(nil).GetStream), video, format)
}

// GetVideo mocks base method.
func (m *MockYotuber) GetVideo(url string) (*v2.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideo", url)
	ret0, _ := ret[0].(*v2.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideo indicates an expected call of GetVideo.
func (mr *MockYotuberMockRecorder) GetVideo(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideo", reflect.TypeOf((*MockYotuber)(nil).GetVideo), url)
}

// MockMetadataDB is a mock of MetadataDB interface.
type MockMetadataDB struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataDBMockRecorder
}

// MockMetadataDBMockRecorder is the mock recorder for MockMetadataDB.
type MockMetadataDBMockRecorder struct {
	mock *MockMetadataDB
}

// NewMockMetadataDB creates a new mock instance.
func NewMockMetadataDB(ctrl *gomock.Controller) *MockMetadataDB {
	mock := &MockMetadataDB{ctrl: ctrl}
	mock.recorder = &MockMetadataDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataDB) EXPECT() *MockMetadataDBMockRecorder {
	return m.recorder
}

// FetchByMetadata mocks base method.
func (m *MockMetadataDB) FetchByMetadata(ctx context.Context, videoID, mime, quality string) (db.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByMetadata", ctx, videoID, mime, quality)
	ret0, _ := ret[0].(db.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByMetadata indicates an expected call of FetchByMetadata.
func (mr *MockMetadataDBMockRecorder) FetchByMetadata(ctx, videoID, mime, quality interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByMetadata", reflect.TypeOf((*MockMetadataDB)(nil).FetchByMetadata), ctx, videoID, mime, quality)
}

// Save mocks base method.
func (m *MockMetadataDB) Save(ctx context.Context, model db.Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMetadataDBMockRecorder) Save(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMetadataDB)(nil).Save), ctx, model)
}

// MockTelegram is a mock of Telegram interface.
type MockTelegram struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramMockRecorder
}

// MockTelegramMockRecorder is the mock recorder for MockTelegram.
type MockTelegramMockRecorder struct {
	mock *MockTelegram
}

// NewMockTelegram creates a new mock instance.
func NewMockTelegram(ctrl *gomock.Controller) *MockTelegram {
	mock := &MockTelegram{ctrl: ctrl}
	mock.recorder = &MockTelegramMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegram) EXPECT() *MockTelegramMockRecorder {
	return m.recorder
}

// GetUpdatesChan mocks base method.
func (m *MockTelegram) GetUpdatesChan(config telegram_bot_api.UpdateConfig) (telegram_bot_api.UpdatesChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatesChan", config)
	ret0, _ := ret[0].(telegram_bot_api.UpdatesChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdatesChan indicates an expected call of GetUpdatesChan.
func (mr *MockTelegramMockRecorder) GetUpdatesChan(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatesChan", reflect.TypeOf((*MockTelegram)(nil).GetUpdatesChan), config)
}

// GetWebhookInfo mocks base method.
func (m *MockTelegram) GetWebhookInfo() (telegram_bot_api.WebhookInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookInfo")
	ret0, _ := ret[0].(telegram_bot_api.WebhookInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookInfo indicates an expected call of GetWebhookInfo.
func (mr *MockTelegramMockRecorder) GetWebhookInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookInfo", reflect.TypeOf((*MockTelegram)(nil).GetWebhookInfo))
}

// ListenForWebhook mocks base method.
func (m *MockTelegram) ListenForWebhook(pattern string) telegram_bot_api.UpdatesChannel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenForWebhook", pattern)
	ret0, _ := ret[0].(telegram_bot_api.UpdatesChannel)
	return ret0
}

// ListenForWebhook indicates an expected call of ListenForWebhook.
func (mr *MockTelegramMockRecorder) ListenForWebhook(pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForWebhook", reflect.TypeOf((*MockTelegram)(nil).ListenForWebhook), pattern)
}

// RemoveWebhook mocks base method.
func (m *MockTelegram) RemoveWebhook() (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWebhook")
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveWebhook indicates an expected call of RemoveWebhook.
func (mr *MockTelegramMockRecorder) RemoveWebhook() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWebhook", reflect.TypeOf((*MockTelegram)(nil).RemoveWebhook))
}

// Send mocks base method.
func (m *MockTelegram) Send(c telegram_bot_api.Chattable) (telegram_bot_api.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", c)
	ret0, _ := ret[0].(telegram_bot_api.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockTelegramMockRecorder) Send(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTelegram)(nil).Send), c)
}

// SetWebhook mocks base method.
func (m *MockTelegram) SetWebhook(config telegram_bot_api.WebhookConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWebhook", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetWebhook indicates an expected call of SetWebhook.
func (mr *MockTelegramMockRecorder) SetWebhook(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWebhook", reflect.TypeOf((*MockTelegram)(nil).SetWebhook), config)
}

// StopReceivingUpdates mocks base method.
func (m *MockTelegram) StopReceivingUpdates() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopReceivingUpdates")
}

// StopReceivingUpdates indicates an expected call of StopReceivingUpdates.
func (mr *MockTelegramMockRecorder) StopReceivingUpdates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopReceivingUpdates", reflect.TypeOf((*MockTelegram)(nil).StopReceivingUpdates))
}

// UploadFileWithContext mocks base method.
func (m *MockTelegram) UploadFileWithContext(ctx context.Context, endpoint string, params map[string]string, fieldname string, file interface{}) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFileWithContext", ctx, endpoint, params, fieldname, file)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFileWithContext indicates an expected call of UploadFileWithContext.
func (mr *MockTelegramMockRecorder) UploadFileWithContext(ctx, endpoint, params, fieldname, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFileWithContext", reflect.TypeOf((*MockTelegram)(nil).UploadFileWithContext), ctx, endpoint, params, fieldname, file)
}

// MockAMQPChannel is a mock of AMQPChannel interface.
type MockAMQPChannel struct {
	ctrl     *gomock.Controller
	recorder *MockAMQPChannelMockRecorder
}

// MockAMQPChannelMockRecorder is the mock recorder for MockAMQPChannel.
type MockAMQPChannelMockRecorder struct {
	mock *MockAMQPChannel
}

// NewMockAMQPChannel creates a new mock instance.
func NewMockAMQPChannel(ctrl *gomock.Controller) *MockAMQPChannel {
	mock := &MockAMQPChannel{ctrl: ctrl}
	mock.recorder = &MockAMQPChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAMQPChannel) EXPECT() *MockAMQPChannelMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockAMQPChannel) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAMQPChannelMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAMQPChannel)(nil).Close))
}

// Consume mocks base method.
func (m *MockAMQPChannel) Consume(queue, consumer string, autoAck, exclusive, noLocal, noWait bool, args amqp.Table) (<-chan amqp.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", queue, consumer, autoAck, exclusive, noLocal, noWait, args)
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockAMQPChannelMockRecorder) Consume(queue, consumer, autoAck, exclusive, noLocal, noWait, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockAMQPChannel)(nil).Consume), queue, consumer, autoAck, exclusive, noLocal, noWait, args)
}

// Publish mocks base method.
func (m *MockAMQPChannel) Publish(exchange, key string, mandatory, immediate bool, msg amqp.Publishing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", exchange, key, mandatory, immediate, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockAMQPChannelMockRecorder) Publish(exchange, key, mandatory, immediate, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockAMQPChannel)(nil).Publish), exchange, key, mandatory, immediate, msg)
}

// QueueDeclare mocks base method.
func (m *MockAMQPChannel) QueueDeclare(name string, durable, autoDelete, exclusive, noWait bool, args amqp.Table) (amqp.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueDeclare", name, durable, autoDelete, exclusive, noWait, args)
	ret0, _ := ret[0].(amqp.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueDeclare indicates an expected call of QueueDeclare.
func (mr *MockAMQPChannelMockRecorder) QueueDeclare(name, durable, autoDelete, exclusive, noWait, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDeclare", reflect.TypeOf((*MockAMQPChannel)(nil).QueueDeclare), name, durable, autoDelete, exclusive, noWait, args)
}

// MockAMQPConnection is a mock of AMQPConnection interface.
type MockAMQPConnection struct {
	ctrl     *gomock.Controller
	recorder *MockAMQPConnectionMockRecorder
}

// MockAMQPConnectionMockRecorder is the mock recorder for MockAMQPConnection.
type MockAMQPConnectionMockRecorder struct {
	mock *MockAMQPConnection
}

// NewMockAMQPConnection creates a new mock instance.
func NewMockAMQPConnection(ctrl *gomock.Controller) *MockAMQPConnection {
	mock := &MockAMQPConnection{ctrl: ctrl}
	mock.recorder = &MockAMQPConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAMQPConnection) EXPECT() *MockAMQPConnectionMockRecorder {
	return m.recorder
}

// Chan mocks base method.
func (m *MockAMQPConnection) Chan() (AMQPChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chan")
	ret0, _ := ret[0].(AMQPChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chan indicates an expected call of Chan.
func (mr *MockAMQPConnectionMockRecorder) Chan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chan", reflect.TypeOf((*MockAMQPConnection)(nil).Chan))
}

// Close mocks base method.
func (m *MockAMQPConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAMQPConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAMQPConnection)(nil).Close))
}

// MockBlob is a mock of Blob interface.
type MockBlob struct {
	ctrl     *gomock.Controller
	recorder *MockBlobMockRecorder
}

// MockBlobMockRecorder is the mock recorder for MockBlob.
type MockBlobMockRecorder struct {
	mock *MockBlob
}

// NewMockBlob creates a new mock instance.
func NewMockBlob(ctrl *gomock.Controller) *MockBlob {
	mock := &MockBlob{ctrl: ctrl}
	mock.recorder = &MockBlobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlob) EXPECT() *MockBlobMockRecorder {
	return m.recorder
}

// CreateObject mocks base method.
func (m *MockBlob) CreateObject(ctx context.Context, bucket, key string, contents []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObject", ctx, bucket, key, contents)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateObject indicates an expected call of CreateObject.
func (mr *MockBlobMockRecorder) CreateObject(ctx, bucket, key, contents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObject", reflect.TypeOf((*MockBlob)(nil).CreateObject), ctx, bucket, key, contents)
}

// DeleteObject mocks base method.
func (m *MockBlob) DeleteObject(ctx context.Context, bucket, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", ctx, bucket, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockBlobMockRecorder) DeleteObject(ctx, bucket, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockBlob)(nil).DeleteObject), ctx, bucket, key)
}

// GetObject mocks base method.
func (m *MockBlob) GetObject(ctx context.Context, bucket, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, bucket, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockBlobMockRecorder) GetObject(ctx, bucket, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockBlob)(nil).GetObject), ctx, bucket, key)
}
